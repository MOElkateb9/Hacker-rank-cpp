#include<bits/stdc++.h>

using namespace std;

//Define the structs Workshops and Available_Workshops.
//Implement the functions initialize and CalculateMaxWorkshops
struct Workshop {
    int start, duration, end;
};

struct Available_Workshops {
    int n;
    Workshop** workshops;
    Available_Workshops(int num) {
        n = num;
        workshops = new Workshop * [num];
    }
    ~Available_Workshops() {
        for (int i = 0; i < n; i++) {
            delete workshops[i];
        }
    }
};

// Implement the initialize function
Available_Workshops* initialize(int start_time[], int duration[], int n) {
    Available_Workshops* av_workshops = new Available_Workshops(n);
    for (int i = 0; i < n; ++i) {
        Workshop* wk = new Workshop;
        wk->start = start_time[i];
        wk->duration = duration[i];
        wk->end = start_time[i] + duration[i];
        av_workshops->workshops[i] = wk;
    }
    return av_workshops;
}

bool compare(Workshop* one, Workshop* two) {
    return one->end < two->end;
}
//Implement the function CalculateMaxWorkshops
int CalculateMaxWorkshops(Available_Workshops* ptr) {
    // Sort workshops
    sort(ptr->workshops, ptr->workshops + ptr->n, compare);

    // Calculate
    int valid = 0;
    int attending_end = 0;
    for (int i = 0; i < ptr->n; ++i) {
        if (ptr->workshops[i]->start >= attending_end) {
            valid++;
            attending_end = ptr->workshops[i]->end;
        }
    }

    return valid;
}
int main(int argc, char *argv[]) {
    int n; // number of workshops
    cin >> n;
    // create arrays of unknown size n
    int* start_time = new int[n];
    int* duration = new int[n];

    for(int i=0; i < n; i++){
        cin >> start_time[i];
    }
    for(int i = 0; i < n; i++){
        cin >> duration[i];
    }

    Available_Workshops * ptr;
    ptr = initialize(start_time,duration, n);
    cout << CalculateMaxWorkshops(ptr) << endl;
    return 0;
}
